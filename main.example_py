# from fastapi import Depends, FastAPI, HTTPException
# from fastapi.security import OAuth2PasswordBearer
# from jose import JWTError, jwt
# from passlib.context import CryptContext
# from pydantic import BaseModel
# from fastapi import FastAPI, APIRouter
# from typing import Union
# from enum import Enum

# class ModelName(str, Enum):
#   alexnet = "alexnet"
#   resnet = "resnet"
#   lenet = "lenet"

# def foo_it():
#   return {'food': True}

# app = FastAPI()
# router = APIRouter()

# router.add_api_route("/", endpoint=foo_it)
# app.include_router(router)
# @app.get("/")
# async def root():
# 	return {"message": "Hello World new one"}

# @app.get("/users/me")
# async def read_user_me():
#   return {"user_id": "current user"}

# @app.get("/users/{user_id}")
# async def read_user(user_id: str):
#   return {"user_id": user_id}

# @app.get("/items/{item_id}")
# async def show_items(item_id: int):
#   return {"item_id" : item_id}

# @app.get("/models/{model_name}")
# async def get_model(model_name: ModelName):
# 	if model_name is ModelName.alexnet:
# 		return {"model_name": model_name, "message": "Deep Learning FTW!"}

# 	if model_name.value == "lenet":
# 		return {"model_name": model_name, "message": "LeCNN all the images"}

# 	return {"model_name": model_name, "message": "Have some residuals"}

